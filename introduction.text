引言
============

### 关于本教程

欢迎来到**为自己学习Haskell**！如果你正在读这本书，很有可能你想学习Haskell。很好，你找对地方了，现在我们先聊聊本教程。

我打算编写这部教程的原因一方面是我想巩固我的Haskell的知识，另一方面我觉得可以帮助刚接触Haskell的新人从我的角度学习Haskell。在网上有很多关于Haskell的教程。当我刚开始学习Haskell的时候，我并不只使用一个资源。我学习它的方式是通过阅读几种不同的教程的文章，因为每篇文章都会从不同角度去解释一些东西。通过阅读不同的文章，我才能将所有片断还原成完整的画面。所以这是在尝试另外一条学习Haskell的有用途径，这样读者就有更大的可能性找到自己的喜欢的方法。

本教程的目标读者是有使用命令式编程语言经验（Ｃ，Ｃ＋＋，Ｊava，Ｐython...)但是还没有使用过函数式编程语言(Haskell，ＭＬ，ＯＣaml...)的人。我想即使没有多少编程经验，像你这么聪明的人肯定没有任何困难。

freenode上的 #haskell频道是一个提问的好地方。那里的人都非常友好，富有耐心，而且体谅新人。

在我掌握Haskell之前，起码有过两次失败，因为对我说Haskell看起来太奇怪了以致我没法领悟。当某天我脑海“咯嚓”一声越过这个障碍之后，一些开始变得顺利。我想要说的是：Haskell很棒，如果你很对编程很感兴趣那你一定要学习它，即使刚开始看起来有点奇怪。学习Haskell就像第一次学习编程一样，很有趣。它强制你用不同的方式思考，这将我们带到下一节。。

### 什么是Haskell?

Haskell是一门**纯函数式编程语言**。命令式编程是你通过给计算机一连串的指令，然后计算机来执行以完成工作。当计算机执行这些指令的时候，它将改变状态。例如，你给变量a赋值5，然后执行了另一些操作，然后再将a设置成其他值。有一些控制结构来使某些操作执行多次。函数式编程不会告诉计算机这样做，相反只是告诉计算机一些事实。一个数的阶乘是从１到这个数的所有数的乘积，一个数的列表的总和是第一个数与剩下的数的总和的和，等等。不能将变量设置为一个值然后再设置成其他值。如果把a设置成5，那就不能再将a设置为其他值。因为你已经说了a是5了，难道你要撒谎吗？所以在纯函数式语言中，函数没有副作用。函数唯一所有做的就是作一些计算然后返回结果。乍一看似乎这样很束手束脚，但是这样做有非常好的结果：如果相同的参数调用同一个函数，可以保证这个函数一定会返回相同的结果。这叫做参照透明度，它不仅使编译器能推导程序行为，而且能让你轻易的推断一个函数的正确性，并且通过将一些简单函数粘合在一起构建更复杂的函数。

Haskell是惰性的。这意味着除非被显式的告知，Haskell不会执行函数没有副作用。函数唯一所有做的就是作一些计算然后返回结果。乍一看似乎这样很束手束脚，但是这样做有非常好的结果：如果相同的参数调用同一个函数，可以保证这个函数一定会返回相同的结果。这叫做参照透明度，它不仅使编译器能推导程序行为，而且能让你轻易的推断一个函数的正确性，并且通过将一些简单函数粘合在一起构建更复杂的函数。

Haskell是惰性的。这意味着除非被显式的告知，Haskell不会执行函数没有副作用。函数唯一所有做的就是作一些计算然后返回结果。乍一看似乎这样很束手束脚，但是这样做有非常好的结果：如果相同的参数调用同一个函数，可以保证这个函数一定会返回相同的结果。这叫做参照透明度，它不仅使编译器能推导程序行为，而且能让你轻易的推断一个函数的正确性，并且通过将一些简单函数粘合在一起构建更复杂的函数。

Haskell是惰性的。这意味着除非被显式的告知，Haskell不会执行函数没有副作用。函数唯一所有做的就是作一些计算然后返回结果。乍一看似乎这样很束手束脚，但是这样做有非常好的结果：如果相同的参数调用同一个函数，可以保证这个函数一定会返回相同的结果。这叫做参照透明度，它不仅使编译器能推导程序行为，而且能让你轻易的推断一个函数的正确性，并且通过将一些简单函数粘合在一起构建更复杂的函数。

Haskell是惰性的。这意味着除非被显式的告知，Haskell不会执行函数没有副作用。函数唯一所有做的就是作一些计算然后返回结果。乍一看似乎这样很束手束脚，但是这样做有非常好的结果：如果相同的参数调用同一个函数，可以保证这个函数一定会返回相同的结果。这叫做参照透明度，它不仅使编译器能推导程序行为，而且能让你轻易的推断一个函数的正确性，并且通过将一些简单函数粘合在一起构建更复杂的函数。

Haskell是惰性的。这意味着除非被显式的告知，直到被强制要求给出结果之前Haskell都不会执行函数进行计算。这种行为与参照透明度结合得很好，它让你可以将程序看作是数据的一系列转换。还能实现一些很酷的东西如无穷数据结构。
